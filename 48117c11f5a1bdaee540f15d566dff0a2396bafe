{
  "comments": [
    {
      "key": {
        "uuid": "baa041b7_f489e026",
        "filename": "vnet/test/fip64/test_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1006717
      },
      "writtenOn": "2016-10-28T10:53:54Z",
      "side": 1,
      "message": "Not a big deal, but move under \u0027done\u0027 label to free in case of error, checking for null in case the pool allocation failed. Same in other functions.",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 24
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_1428c4ed",
        "filename": "vnet/test/fip64/test_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1006717
      },
      "writtenOn": "2016-10-28T10:53:54Z",
      "side": 1,
      "message": "I would add somewhere, maybe here, a check that once pool is empty, a call to fip64_pool_get returns 0, so this is is checked also.",
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_e996adee",
        "filename": "vnet/test/fip64/test_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1009315
      },
      "writtenOn": "2016-10-28T08:56:22Z",
      "side": 1,
      "message": "To get exact worst lookup time I would take a bitmap, set all bits except first and then call bitmap_set(start_from_first). The loop can calculated \"expected\" lookup time",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 165,
        "endChar": 47
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_d4e37cd7",
        "filename": "vnet/test/fip64/test_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1006717
      },
      "writtenOn": "2016-10-28T10:53:54Z",
      "side": 1,
      "message": "space",
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_34be28af",
        "filename": "vnet/test/fip64/test_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1006717
      },
      "writtenOn": "2016-10-28T10:53:54Z",
      "side": 1,
      "message": "Not going to happen, but in case the implementation allocates something by error, and the pool is not null, the pool should be freed (maybe failing anyway since if probably be fubar)",
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_545f6c0f",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1006717
      },
      "writtenOn": "2016-10-28T10:53:54Z",
      "side": 1,
      "message": "Not a big deal, but I think \u0027ip4_address_t prefix, int prefix_length\u0027 would be clearer to the reader.",
      "range": {
        "startLine": 22,
        "startChar": 17,
        "endLine": 22,
        "endChar": 47
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_6f0dfd34",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "let\u0027s keep this for now, but the NatTarget from cluster is:\n\n  message NatTarget {\n        optional IPAddress nw_start \u003d 1;\n        optional IPAddress nw_end \u003d 2;\n        optional uint32 tp_start \u003d 3;\n        optional uint32 tp_end \u003d 4;\n    }\n\nnot a subnet. we might have to change one or the other",
      "range": {
        "startLine": 22,
        "startChar": 32,
        "endLine": 22,
        "endChar": 35
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_69205df9",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1009315
      },
      "writtenOn": "2016-10-28T08:56:22Z",
      "side": 1,
      "message": "Always 1 \u003c\u003c (32 - prefix)",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 51
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_29525536",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1008620
      },
      "writtenOn": "2016-10-28T10:36:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baa041b7_69205df9",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 51
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_d4cdbc31",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "will this overflow with prefix 0? maybe we shouldn\u0027t allow prefix 0",
      "range": {
        "startLine": 33,
        "startChar": 29,
        "endLine": 33,
        "endChar": 47
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_74fcb03f",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "does num_addresses change? if not, use it instead of count",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 35,
        "endChar": 21
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_c9b2c996",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1009315
      },
      "writtenOn": "2016-10-28T08:56:22Z",
      "side": 1,
      "message": "We allocate potentially unnesessary 512K of memory for each fip6 tenant.\nJust to bear in mind",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 44
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_4955991c",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1008620
      },
      "writtenOn": "2016-10-28T10:36:09Z",
      "side": 1,
      "message": "Another choice would be to get rid of the hashing, allocate from the beginning and let the bitmap grow automatically",
      "parentUuid": "baa041b7_c9b2c996",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 44
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_d4081c83",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1006717
      },
      "writtenOn": "2016-10-28T10:53:54Z",
      "side": 1,
      "message": "I think hashing is a good approach, and not related with the bitmap. One thing is to try to keep the same mapping from IPv6 to IPv4 via a consistent hash, and another the count of used ones (bitmap, tree, hash-map, bloom-filters, etc) in case there are collision and another mapping has to be given.",
      "parentUuid": "baa041b7_4955991c",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 44
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_3429889c",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "we might have to reconsider hashing, but let\u0027s keep it for now in the patch and discuss the tradeoffs. we\u0027re still not sure on the size of the subnet used for the pool, so maybe using hashing with a small subnet may lead to collisions. perhaps this is also something we have to research before deciding",
      "parentUuid": "baa041b7_d4081c83",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 44
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_b4d238d0",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "needed?",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_14eb247d",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "nit: maybe we should agree on a style rule for spaces? e.g. space before opening parenthesis, no space after? the other way around when closing",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 7
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_cf1c0969",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "use a bit op",
      "range": {
        "startLine": 71,
        "startChar": 18,
        "endLine": 71,
        "endChar": 40
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_f4efa084",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 81,
        "startChar": 8,
        "endLine": 81,
        "endChar": 11
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_0f98b1cb",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "i don\u0027t think we should use an assertion error to indicate there was no free address in the pool, maybe return a zero address?",
      "range": {
        "startLine": 84,
        "startChar": 10,
        "endLine": 84,
        "endChar": 27
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_d4e49ca9",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 98,
        "startChar": 20,
        "endLine": 98,
        "endChar": 22
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_b4e91882",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 102,
        "startChar": 20,
        "endLine": 102,
        "endChar": 22
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_2f5c9518",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "maybe instead of some of these asserts, the function should return true if the release was successful, false otherwise",
      "range": {
        "startLine": 105,
        "startChar": 2,
        "endLine": 105,
        "endChar": 19
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_8f65e1e3",
        "filename": "vnet/vnet/fip64/fip64_pool.c",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 108,
        "startChar": 19,
        "endLine": 108,
        "endChar": 21
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_145d647c",
        "filename": "vnet/vnet/fip64/fip64_pool.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-10-28T12:31:17Z",
      "side": 1,
      "message": "nit: not needed",
      "range": {
        "startLine": 27,
        "startChar": 15,
        "endLine": 27,
        "endChar": 27
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_89f5e185",
        "filename": "vnet/vnet/fip64/fip64_pool.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1009315
      },
      "writtenOn": "2016-10-28T08:56:22Z",
      "side": 1,
      "message": "extra ;",
      "range": {
        "startLine": 31,
        "startChar": 25,
        "endLine": 31,
        "endChar": 27
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_092e71ab",
        "filename": "vnet/vnet/fip64/fip64_pool.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1008620
      },
      "writtenOn": "2016-10-28T10:36:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baa041b7_89f5e185",
      "range": {
        "startLine": 31,
        "startChar": 25,
        "endLine": 31,
        "endChar": 27
      },
      "revId": "48117c11f5a1bdaee540f15d566dff0a2396bafe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}